{"ast":null,"code":"import printBuffer from './core';\nimport { timer } from './helpers';\nimport defaults from './defaults';\n/* eslint max-len: [\"error\", 110, { \"ignoreComments\": true }] */\n/**\r\n * Creates logger with following options\r\n *\r\n * @namespace\r\n * @param {object} options - options for logger\r\n * @param {string | function | object} options.level - console[level]\r\n * @param {boolean} options.duration - print duration of each action?\r\n * @param {boolean} options.timestamp - print timestamp with each action?\r\n * @param {object} options.colors - custom colors\r\n * @param {object} options.logger - implementation of the `console` API\r\n * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?\r\n * @param {boolean} options.collapsed - is group collapsed?\r\n * @param {boolean} options.predicate - condition which resolves logger behavior\r\n * @param {function} options.stateTransformer - transform state before print\r\n * @param {function} options.actionTransformer - transform action before print\r\n * @param {function} options.errorTransformer - transform error before print\r\n *\r\n * @returns {function} logger middleware\r\n */\nfunction createLogger() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const loggerOptions = Object.assign({}, defaults, options);\n  const {\n    logger,\n    stateTransformer,\n    errorTransformer,\n    predicate,\n    logErrors,\n    diffPredicate\n  } = loggerOptions;\n\n  // Return if 'console' object is not defined\n  if (typeof logger === 'undefined') {\n    return () => next => action => next(action);\n  }\n\n  // Detect if 'createLogger' was passed directly to 'applyMiddleware'.\n  if (options.getState && options.dispatch) {\n    // eslint-disable-next-line no-console\n    console.error(`[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n`);\n    return () => next => action => next(action);\n  }\n  const logBuffer = [];\n  return _ref => {\n    let {\n      getState\n    } = _ref;\n    return next => action => {\n      // Exit early if predicate function returns 'false'\n      if (typeof predicate === 'function' && !predicate(getState, action)) {\n        return next(action);\n      }\n      const logEntry = {};\n      logBuffer.push(logEntry);\n      logEntry.started = timer.now();\n      logEntry.startedTime = new Date();\n      logEntry.prevState = stateTransformer(getState());\n      logEntry.action = action;\n      let returnedValue;\n      if (logErrors) {\n        try {\n          returnedValue = next(action);\n        } catch (e) {\n          logEntry.error = errorTransformer(e);\n        }\n      } else {\n        returnedValue = next(action);\n      }\n      logEntry.took = timer.now() - logEntry.started;\n      logEntry.nextState = stateTransformer(getState());\n      const diff = loggerOptions.diff && typeof diffPredicate === 'function' ? diffPredicate(getState, action) : loggerOptions.diff;\n      printBuffer(logBuffer, Object.assign({}, loggerOptions, {\n        diff\n      }));\n      logBuffer.length = 0;\n      if (logEntry.error) throw logEntry.error;\n      return returnedValue;\n    };\n  };\n}\n\n// eslint-disable-next-line consistent-return\nconst defaultLogger = function () {\n  let {\n    dispatch,\n    getState\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof dispatch === 'function' || typeof getState === 'function') {\n    return createLogger()({\n      dispatch,\n      getState\n    });\n  }\n  // eslint-disable-next-line no-console\n  console.error(`\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n`);\n};\nexport { defaults, createLogger, defaultLogger as logger };\nexport default defaultLogger;","map":{"version":3,"names":["printBuffer","timer","defaults","createLogger","options","arguments","length","undefined","loggerOptions","Object","assign","logger","stateTransformer","errorTransformer","predicate","logErrors","diffPredicate","next","action","getState","dispatch","console","error","logBuffer","_ref","logEntry","push","started","now","startedTime","Date","prevState","returnedValue","e","took","nextState","diff","defaultLogger"],"sources":["E:/CSCI3130/latest_project/group14/project/trello-frontend/node_modules/redux-logger/src/index.js"],"sourcesContent":["import printBuffer from './core';\r\nimport { timer } from './helpers';\r\nimport defaults from './defaults';\r\n/* eslint max-len: [\"error\", 110, { \"ignoreComments\": true }] */\r\n/**\r\n * Creates logger with following options\r\n *\r\n * @namespace\r\n * @param {object} options - options for logger\r\n * @param {string | function | object} options.level - console[level]\r\n * @param {boolean} options.duration - print duration of each action?\r\n * @param {boolean} options.timestamp - print timestamp with each action?\r\n * @param {object} options.colors - custom colors\r\n * @param {object} options.logger - implementation of the `console` API\r\n * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?\r\n * @param {boolean} options.collapsed - is group collapsed?\r\n * @param {boolean} options.predicate - condition which resolves logger behavior\r\n * @param {function} options.stateTransformer - transform state before print\r\n * @param {function} options.actionTransformer - transform action before print\r\n * @param {function} options.errorTransformer - transform error before print\r\n *\r\n * @returns {function} logger middleware\r\n */\r\nfunction createLogger(options = {}) {\r\n  const loggerOptions = Object.assign({}, defaults, options);\r\n\r\n  const {\r\n    logger,\r\n    stateTransformer,\r\n    errorTransformer,\r\n    predicate,\r\n    logErrors,\r\n    diffPredicate,\r\n  } = loggerOptions;\r\n\r\n  // Return if 'console' object is not defined\r\n  if (typeof logger === 'undefined') {\r\n    return () => next => action => next(action);\r\n  }\r\n\r\n  // Detect if 'createLogger' was passed directly to 'applyMiddleware'.\r\n  if (options.getState && options.dispatch) {\r\n    // eslint-disable-next-line no-console\r\n    console.error(`[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\r\n// Logger with default options\r\nimport { logger } from 'redux-logger'\r\nconst store = createStore(\r\n  reducer,\r\n  applyMiddleware(logger)\r\n)\r\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\r\nimport createLogger from 'redux-logger'\r\nconst logger = createLogger({\r\n  // ...options\r\n});\r\nconst store = createStore(\r\n  reducer,\r\n  applyMiddleware(logger)\r\n)\r\n`);\r\n\r\n    return () => next => action => next(action);\r\n  }\r\n\r\n  const logBuffer = [];\r\n\r\n  return ({ getState }) => next => (action) => {\r\n    // Exit early if predicate function returns 'false'\r\n    if (typeof predicate === 'function' && !predicate(getState, action)) {\r\n      return next(action);\r\n    }\r\n\r\n    const logEntry = {};\r\n\r\n    logBuffer.push(logEntry);\r\n\r\n    logEntry.started = timer.now();\r\n    logEntry.startedTime = new Date();\r\n    logEntry.prevState = stateTransformer(getState());\r\n    logEntry.action = action;\r\n\r\n    let returnedValue;\r\n    if (logErrors) {\r\n      try {\r\n        returnedValue = next(action);\r\n      } catch (e) {\r\n        logEntry.error = errorTransformer(e);\r\n      }\r\n    } else {\r\n      returnedValue = next(action);\r\n    }\r\n\r\n    logEntry.took = timer.now() - logEntry.started;\r\n    logEntry.nextState = stateTransformer(getState());\r\n\r\n    const diff = loggerOptions.diff && typeof diffPredicate === 'function'\r\n      ? diffPredicate(getState, action)\r\n      : loggerOptions.diff;\r\n\r\n    printBuffer(logBuffer, Object.assign({}, loggerOptions, { diff }));\r\n    logBuffer.length = 0;\r\n\r\n    if (logEntry.error) throw logEntry.error;\r\n    return returnedValue;\r\n  };\r\n}\r\n\r\n// eslint-disable-next-line consistent-return\r\nconst defaultLogger = ({ dispatch, getState } = {}) => {\r\n  if (typeof dispatch === 'function' || typeof getState === 'function') {\r\n    return createLogger()({ dispatch, getState });\r\n  }\r\n  // eslint-disable-next-line no-console\r\n  console.error(`\r\n[redux-logger v3] BREAKING CHANGE\r\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\r\n[redux-logger v3] Change\r\n[redux-logger v3] import createLogger from 'redux-logger'\r\n[redux-logger v3] to\r\n[redux-logger v3] import { createLogger } from 'redux-logger'\r\n`);\r\n};\r\n\r\nexport { defaults, createLogger, defaultLogger as logger };\r\n\r\nexport default defaultLogger;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}