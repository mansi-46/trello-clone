{"ast":null,"code":"var _jsxFileName = \"E:\\\\CSCI3130\\\\project-T\\\\group14\\\\project\\\\trello-frontend\\\\src\\\\pages\\\\Boards.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n// import IconButton from \"@mui/material/IconButton\";\nimport { Grid, Typography, TextField, Button, Paper } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  const [boardName, setBoardName] = useState('');\n  const [workspaceName, setWorkspaceName] = useState('');\n  const [boards, setBoards] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:8080/boards/getAllBoards').then(response => response.json()).then(data => setBoards(data)).catch(error => console.error('Error:', error));\n  }, []);\n  const handleCreateBoard = () => {\n    const newBoard = {\n      boardName: boardName,\n      workspaceName: workspaceName,\n      picture: 'https://w7.pngwing.com/pngs/429/972/png-transparent-green-chalk-board-cartoon-blackboard-cartoon-green-chalkboard-miscellaneous-cartoon-character-english.png'\n    };\n    fetch('http://localhost:8080/boards/createBoard', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newBoard)\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      setBoards([...boards, data]);\n      setBoardName('');\n      setWorkspaceName('');\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  const handleDeleteBoard = boardName => {\n    fetch(`http://localhost:8080/boards/deleteBoard?boardName=${boardName}`, {\n      method: 'POST'\n    }).then(response => response.text()).then(data => {\n      if (data === 'Board Successfully Deleted') {\n        console.log(data);\n        setBoards(prevBoards => prevBoards.filter(board => board.boardName !== boardName));\n      } else {\n        console.log('Failed to delete board.');\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 16\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Create a Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Board Name\",\n          variant: \"outlined\",\n          fullWidth: true,\n          value: boardName,\n          onChange: e => setBoardName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Workspace Name\",\n          variant: \"outlined\",\n          fullWidth: true,\n          value: workspaceName,\n          onChange: e => setWorkspaceName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleCreateBoard,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Boards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), boards.map(board => /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      style: {\n        padding: 16,\n        margin: '16px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 10,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: board.picture,\n            alt: board.boardName,\n            style: {\n              width: 50,\n              height: 50,\n              marginRight: 10\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: board.boardName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: [\"Workspace: \", board.workspaceName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"secondary\",\n            startIcon: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-trash-alt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 44\n            }, this) // FontAwesome trash icon\n            ,\n            onClick: () => handleDeleteBoard(board.boardName),\n            style: {\n              marginLeft: 'auto'\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)\n    }, board.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(Board, \"CBjQ3MV5r+dBLlI8f64Wybo+QQY=\");\n_c = Board;\nexport default Board;\n\n// const handleCreateBoard = () => {\n//     const newBoard = {\n//         boardName: boardName,\n//     };\n//\n//     fetch('http://localhost:8080/boards/createBoard', {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(newBoard),\n//     })\n//         .then(response => response.json())\n//         .then(data => {\n//             console.log(data);\n//             setBoards([...boards, data]);\n//             setBoardName('');\n//         })\n//         .catch(error => {\n//             console.error(error);\n//         });\n// };\n//\n// const handleDeleteBoard = (boardName) => {\n//     fetch(`http://localhost:8080/boards/deleteBoard?boardName=${boardName}`, {\n//         method: 'POST',\n//     })\n//         .then(response => response.text())\n//         .then(data => {\n//             if (data) {\n//                 console.log(data);\n//                 setBoards(prevBoards => [...prevBoards, data]);\n//                 setBoardName('');\n//             } else {\n//                 console.log('Failed to create board.');\n//             }\n//         })\n//         .catch(error => {\n//             console.error(error);\n//         });\n// };\n// const handleCreateBoard = () => {\n//     // Check if the board name already exists\n//     const isDuplicateName = boards.some((board) => board.name === boardName);\n//\n//     if (isDuplicateName) {\n//         // Show an alert if the name is a duplicate\n//         alert(\"Board with the same name already exists!\");\n//     } else {\n//         // Create a new board with the provided name\n//         const newBoard = {\n//             name: boardName,\n//             picture: \"https://w7.pngwing.com/pngs/429/972/png-transparent-green-chalk-board-cartoon-blackboard-cartoon-green-chalkboard-miscellaneous-cartoon-character-english.png\",\n//             id: Date.now(), // Generate a unique ID for the board\n//         };\n//\n//         // Add the new board to the list of boards\n//         setBoards([...boards, newBoard]);\n//         // Reset the board name input\n//         setBoardName('');\n//     }\n// };\n// const handleDeleteBoard = (name) => {\n//     // Filter out the board with the provided ID\n//     const updatedBoards = boards.filter((board) => board.name !== name);\n//     // Update the list of boards\n//     setBoards(updatedBoards);\n// };\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","Grid","Typography","TextField","Button","Paper","jsxDEV","_jsxDEV","Board","_s","boardName","setBoardName","workspaceName","setWorkspaceName","boards","setBoards","fetch","then","response","json","data","catch","error","console","handleCreateBoard","newBoard","picture","method","headers","body","JSON","stringify","log","handleDeleteBoard","text","prevBoards","filter","board","style","padding","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","alignItems","item","xs","label","fullWidth","value","onChange","e","target","color","onClick","map","elevation","margin","src","alt","width","height","marginRight","startIcon","className","marginLeft","id","_c","$RefreshReg$"],"sources":["E:/CSCI3130/project-T/group14/project/trello-frontend/src/pages/Boards.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\n// import IconButton from \"@mui/material/IconButton\";\r\nimport { Grid, Typography, TextField, Button, Paper } from '@mui/material';\r\nfunction Board() {\r\n    const [boardName, setBoardName] = useState('');\r\n    const [workspaceName, setWorkspaceName] = useState('');\r\n    const [boards, setBoards] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:8080/boards/getAllBoards')\r\n            .then(response => response.json())\r\n            .then(data => setBoards(data))\r\n            .catch(error => console.error('Error:', error));\r\n    }, []);\r\n\r\n    const handleCreateBoard = () => {\r\n        const newBoard = {\r\n            boardName: boardName,\r\n            workspaceName: workspaceName,\r\n            picture: 'https://w7.pngwing.com/pngs/429/972/png-transparent-green-chalk-board-cartoon-blackboard-cartoon-green-chalkboard-miscellaneous-cartoon-character-english.png',\r\n        };\r\n\r\n        fetch('http://localhost:8080/boards/createBoard', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newBoard),\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setBoards([...boards, data]);\r\n                setBoardName('');\r\n                setWorkspaceName('');\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    };\r\n\r\n    const handleDeleteBoard = (boardName) => {\r\n        fetch(`http://localhost:8080/boards/deleteBoard?boardName=${boardName}`, {\r\n            method: 'POST',\r\n        })\r\n            .then(response => response.text())\r\n            .then(data => {\r\n                if (data === 'Board Successfully Deleted') {\r\n                    console.log(data);\r\n                    setBoards(prevBoards => prevBoards.filter(board => board.boardName !== boardName));\r\n                } else {\r\n                    console.log('Failed to delete board.');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: 16 }}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Create a Board\r\n            </Typography>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        label=\"Board Name\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={boardName}\r\n                        onChange={(e) => setBoardName(e.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        label=\"Workspace Name\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={workspaceName}\r\n                        onChange={(e) => setWorkspaceName(e.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleCreateBoard}>\r\n                        Create\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Boards\r\n            </Typography>\r\n            {boards.map(board => (\r\n                <Paper key={board.id} elevation={2} style={{ padding: 16, margin: '16px 0' }}>\r\n                    <Grid container alignItems=\"center\">\r\n                        <Grid item xs={10}>\r\n                            <img\r\n                                src={board.picture}\r\n                                alt={board.boardName}\r\n                                style={{ width: 50, height: 50, marginRight: 10 }}\r\n                            />\r\n                            <Typography variant=\"h6\">{board.boardName}</Typography>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                Workspace: {board.workspaceName}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"secondary\"\r\n                                startIcon={<i className=\"fas fa-trash-alt\"></i>} // FontAwesome trash icon\r\n                                onClick={() => handleDeleteBoard(board.boardName)}\r\n                                style={{ marginLeft: 'auto' }}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n\r\n// const handleCreateBoard = () => {\r\n//     const newBoard = {\r\n//         boardName: boardName,\r\n//     };\r\n//\r\n//     fetch('http://localhost:8080/boards/createBoard', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//             'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(newBoard),\r\n//     })\r\n//         .then(response => response.json())\r\n//         .then(data => {\r\n//             console.log(data);\r\n//             setBoards([...boards, data]);\r\n//             setBoardName('');\r\n//         })\r\n//         .catch(error => {\r\n//             console.error(error);\r\n//         });\r\n// };\r\n//\r\n// const handleDeleteBoard = (boardName) => {\r\n//     fetch(`http://localhost:8080/boards/deleteBoard?boardName=${boardName}`, {\r\n//         method: 'POST',\r\n//     })\r\n//         .then(response => response.text())\r\n//         .then(data => {\r\n//             if (data) {\r\n//                 console.log(data);\r\n//                 setBoards(prevBoards => [...prevBoards, data]);\r\n//                 setBoardName('');\r\n//             } else {\r\n//                 console.log('Failed to create board.');\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             console.error(error);\r\n//         });\r\n// };\r\n// const handleCreateBoard = () => {\r\n//     // Check if the board name already exists\r\n//     const isDuplicateName = boards.some((board) => board.name === boardName);\r\n//\r\n//     if (isDuplicateName) {\r\n//         // Show an alert if the name is a duplicate\r\n//         alert(\"Board with the same name already exists!\");\r\n//     } else {\r\n//         // Create a new board with the provided name\r\n//         const newBoard = {\r\n//             name: boardName,\r\n//             picture: \"https://w7.pngwing.com/pngs/429/972/png-transparent-green-chalk-board-cartoon-blackboard-cartoon-green-chalkboard-miscellaneous-cartoon-character-english.png\",\r\n//             id: Date.now(), // Generate a unique ID for the board\r\n//         };\r\n//\r\n//         // Add the new board to the list of boards\r\n//         setBoards([...boards, newBoard]);\r\n//         // Reset the board name input\r\n//         setBoardName('');\r\n//     }\r\n// };\r\n// const handleDeleteBoard = (name) => {\r\n//     // Filter out the board with the provided ID\r\n//     const updatedBoards = boards.filter((board) => board.name !== name);\r\n//     // Update the list of boards\r\n//     setBoards(updatedBoards);\r\n// };"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD;AACA,SAASC,IAAI,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC3E,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZiB,KAAK,CAAC,2CAA2C,CAAC,CAC7CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,SAAS,CAACK,IAAI,CAAC,CAAC,CAC7BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;EACvD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMC,QAAQ,GAAG;MACbf,SAAS,EAAEA,SAAS;MACpBE,aAAa,EAAEA,aAAa;MAC5Bc,OAAO,EAAE;IACb,CAAC;IAEDV,KAAK,CAAC,0CAA0C,EAAE;MAC9CW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ;IACjC,CAAC,CAAC,CACGR,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVG,OAAO,CAACS,GAAG,CAACZ,IAAI,CAAC;MACjBL,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEM,IAAI,CAAC,CAAC;MAC5BT,YAAY,CAAC,EAAE,CAAC;MAChBE,gBAAgB,CAAC,EAAE,CAAC;IACxB,CAAC,CAAC,CACDQ,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACxB,CAAC,CAAC;EACV,CAAC;EAED,MAAMW,iBAAiB,GAAIvB,SAAS,IAAK;IACrCM,KAAK,CAAE,sDAAqDN,SAAU,EAAC,EAAE;MACrEiB,MAAM,EAAE;IACZ,CAAC,CAAC,CACGV,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACgB,IAAI,CAAC,CAAC,CAAC,CACjCjB,IAAI,CAACG,IAAI,IAAI;MACV,IAAIA,IAAI,KAAK,4BAA4B,EAAE;QACvCG,OAAO,CAACS,GAAG,CAACZ,IAAI,CAAC;QACjBL,SAAS,CAACoB,UAAU,IAAIA,UAAU,CAACC,MAAM,CAACC,KAAK,IAAIA,KAAK,CAAC3B,SAAS,KAAKA,SAAS,CAAC,CAAC;MACtF,CAAC,MAAM;QACHa,OAAO,CAACS,GAAG,CAAC,yBAAyB,CAAC;MAC1C;IACJ,CAAC,CAAC,CACDX,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACxB,CAAC,CAAC;EACV,CAAC;EAED,oBACIf,OAAA;IAAK+B,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,gBACxBjC,OAAA,CAACL,UAAU;MAACuC,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAEtC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACbvC,OAAA,CAACN,IAAI;MAAC8C,SAAS;MAACC,OAAO,EAAE,CAAE;MAACC,UAAU,EAAC,QAAQ;MAAAT,QAAA,gBAC3CjC,OAAA,CAACN,IAAI;QAACiD,IAAI;QAACC,EAAE,EAAE,CAAE;QAAAX,QAAA,eACbjC,OAAA,CAACJ,SAAS;UACNiD,KAAK,EAAC,YAAY;UAClBX,OAAO,EAAC,UAAU;UAClBY,SAAS;UACTC,KAAK,EAAE5C,SAAU;UACjB6C,QAAQ,EAAGC,CAAC,IAAK7C,YAAY,CAAC6C,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACPvC,OAAA,CAACN,IAAI;QAACiD,IAAI;QAACC,EAAE,EAAE,CAAE;QAAAX,QAAA,eACbjC,OAAA,CAACJ,SAAS;UACNiD,KAAK,EAAC,gBAAgB;UACtBX,OAAO,EAAC,UAAU;UAClBY,SAAS;UACTC,KAAK,EAAE1C,aAAc;UACrB2C,QAAQ,EAAGC,CAAC,IAAK3C,gBAAgB,CAAC2C,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACPvC,OAAA,CAACN,IAAI;QAACiD,IAAI;QAACC,EAAE,EAAE,EAAG;QAAAX,QAAA,eACdjC,OAAA,CAACH,MAAM;UAACqC,OAAO,EAAC,WAAW;UAACiB,KAAK,EAAC,SAAS;UAACC,OAAO,EAAEnC,iBAAkB;UAAAgB,QAAA,EAAC;QAExE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAEPvC,OAAA,CAACL,UAAU;MAACuC,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAEtC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,EACZhC,MAAM,CAAC8C,GAAG,CAACvB,KAAK,iBACb9B,OAAA,CAACF,KAAK;MAAgBwD,SAAS,EAAE,CAAE;MAACvB,KAAK,EAAE;QAAEC,OAAO,EAAE,EAAE;QAAEuB,MAAM,EAAE;MAAS,CAAE;MAAAtB,QAAA,eACzEjC,OAAA,CAACN,IAAI;QAAC8C,SAAS;QAACE,UAAU,EAAC,QAAQ;QAAAT,QAAA,gBAC/BjC,OAAA,CAACN,IAAI;UAACiD,IAAI;UAACC,EAAE,EAAE,EAAG;UAAAX,QAAA,gBACdjC,OAAA;YACIwD,GAAG,EAAE1B,KAAK,CAACX,OAAQ;YACnBsC,GAAG,EAAE3B,KAAK,CAAC3B,SAAU;YACrB4B,KAAK,EAAE;cAAE2B,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,WAAW,EAAE;YAAG;UAAE;YAAAxB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrD,CAAC,eACFvC,OAAA,CAACL,UAAU;YAACuC,OAAO,EAAC,IAAI;YAAAD,QAAA,EAAEH,KAAK,CAAC3B;UAAS;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eACvDvC,OAAA,CAACL,UAAU;YAACuC,OAAO,EAAC,OAAO;YAACiB,KAAK,EAAC,gBAAgB;YAAAlB,QAAA,GAAC,aACpC,EAACH,KAAK,CAACzB,aAAa;UAAA;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX,CAAC,eACPvC,OAAA,CAACN,IAAI;UAACiD,IAAI;UAACC,EAAE,EAAE,CAAE;UAAAX,QAAA,eACbjC,OAAA,CAACH,MAAM;YACHqC,OAAO,EAAC,UAAU;YAClBiB,KAAK,EAAC,WAAW;YACjBU,SAAS,eAAE7D,OAAA;cAAG8D,SAAS,EAAC;YAAkB;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAE,CAAC;YAAA;YACjDa,OAAO,EAAEA,CAAA,KAAM1B,iBAAiB,CAACI,KAAK,CAAC3B,SAAS,CAAE;YAClD4B,KAAK,EAAE;cAAEgC,UAAU,EAAE;YAAO,CAAE;YAAA9B,QAAA,EACjC;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC,GAxBCT,KAAK,CAACkC,EAAE;MAAA5B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAyBb,CACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACrC,EAAA,CAxHQD,KAAK;AAAAgE,EAAA,GAALhE,KAAK;AA0Hd,eAAeA,KAAK;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}