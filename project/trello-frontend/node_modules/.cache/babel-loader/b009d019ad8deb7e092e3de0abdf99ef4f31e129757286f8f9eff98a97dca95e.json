{"ast":null,"code":"import { formatTime } from './helpers';\nimport diffLogger from './diff';\n\n/**\r\n * Get log level string based on supplied params\r\n *\r\n * @param {string | function | object} level - console[level]\r\n * @param {object} action - selected action\r\n * @param {array} payload - selected payload\r\n * @param {string} type - log entry type\r\n *\r\n * @returns {string} level\r\n */\nfunction getLogLevel(level, action, payload, type) {\n  switch (typeof level) {\n    case 'object':\n      return typeof level[type] === 'function' ? level[type](...payload) : level[type];\n    case 'function':\n      return level(action);\n    default:\n      return level;\n  }\n}\nfunction defaultTitleFormatter(options) {\n  const {\n    timestamp,\n    duration\n  } = options;\n  return (action, time, took) => {\n    const parts = ['action'];\n    parts.push(`%c${String(action.type)}`);\n    if (timestamp) parts.push(`%c@ ${time}`);\n    if (duration) parts.push(`%c(in ${took.toFixed(2)} ms)`);\n    return parts.join(' ');\n  };\n}\nfunction printBuffer(buffer, options) {\n  const {\n    logger,\n    actionTransformer,\n    titleFormatter = defaultTitleFormatter(options),\n    collapsed,\n    colors,\n    level,\n    diff\n  } = options;\n  const isUsingDefaultFormatter = typeof options.titleFormatter === 'undefined';\n  buffer.forEach((logEntry, key) => {\n    const {\n      started,\n      startedTime,\n      action,\n      prevState,\n      error\n    } = logEntry;\n    let {\n      took,\n      nextState\n    } = logEntry;\n    const nextEntry = buffer[key + 1];\n    if (nextEntry) {\n      nextState = nextEntry.prevState;\n      took = nextEntry.started - started;\n    }\n\n    // Message\n    const formattedAction = actionTransformer(action);\n    const isCollapsed = typeof collapsed === 'function' ? collapsed(() => nextState, action, logEntry) : collapsed;\n    const formattedTime = formatTime(startedTime);\n    const titleCSS = colors.title ? `color: ${colors.title(formattedAction)};` : '';\n    const headerCSS = ['color: gray; font-weight: lighter;'];\n    headerCSS.push(titleCSS);\n    if (options.timestamp) headerCSS.push('color: gray; font-weight: lighter;');\n    if (options.duration) headerCSS.push('color: gray; font-weight: lighter;');\n    const title = titleFormatter(formattedAction, formattedTime, took);\n\n    // Render\n    try {\n      if (isCollapsed) {\n        if (colors.title && isUsingDefaultFormatter) {\n          logger.groupCollapsed(`%c ${title}`, ...headerCSS);\n        } else logger.groupCollapsed(title);\n      } else if (colors.title && isUsingDefaultFormatter) {\n        logger.group(`%c ${title}`, ...headerCSS);\n      } else {\n        logger.group(title);\n      }\n    } catch (e) {\n      logger.log(title);\n    }\n    const prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');\n    const actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');\n    const errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');\n    const nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');\n    if (prevStateLevel) {\n      if (colors.prevState) {\n        const styles = `color: ${colors.prevState(prevState)}; font-weight: bold`;\n        logger[prevStateLevel]('%c prev state', styles, prevState);\n      } else logger[prevStateLevel]('prev state', prevState);\n    }\n    if (actionLevel) {\n      if (colors.action) {\n        const styles = `color: ${colors.action(formattedAction)}; font-weight: bold`;\n        logger[actionLevel]('%c action    ', styles, formattedAction);\n      } else logger[actionLevel]('action    ', formattedAction);\n    }\n    if (error && errorLevel) {\n      if (colors.error) {\n        const styles = `color: ${colors.error(error, prevState)}; font-weight: bold;`;\n        logger[errorLevel]('%c error     ', styles, error);\n      } else logger[errorLevel]('error     ', error);\n    }\n    if (nextStateLevel) {\n      if (colors.nextState) {\n        const styles = `color: ${colors.nextState(nextState)}; font-weight: bold`;\n        logger[nextStateLevel]('%c next state', styles, nextState);\n      } else logger[nextStateLevel]('next state', nextState);\n    }\n    if (diff) {\n      diffLogger(prevState, nextState, logger, isCollapsed);\n    }\n    try {\n      logger.groupEnd();\n    } catch (e) {\n      logger.log('—— log end ——');\n    }\n  });\n}\nexport default printBuffer;","map":{"version":3,"names":["formatTime","diffLogger","getLogLevel","level","action","payload","type","defaultTitleFormatter","options","timestamp","duration","time","took","parts","push","String","toFixed","join","printBuffer","buffer","logger","actionTransformer","titleFormatter","collapsed","colors","diff","isUsingDefaultFormatter","forEach","logEntry","key","started","startedTime","prevState","error","nextState","nextEntry","formattedAction","isCollapsed","formattedTime","titleCSS","title","headerCSS","groupCollapsed","group","e","log","prevStateLevel","actionLevel","errorLevel","nextStateLevel","styles","groupEnd"],"sources":["E:/CSCI3130/project-T/group14/project/trello-frontend/node_modules/redux-logger/src/core.js"],"sourcesContent":["import { formatTime } from './helpers';\r\nimport diffLogger from './diff';\r\n\r\n/**\r\n * Get log level string based on supplied params\r\n *\r\n * @param {string | function | object} level - console[level]\r\n * @param {object} action - selected action\r\n * @param {array} payload - selected payload\r\n * @param {string} type - log entry type\r\n *\r\n * @returns {string} level\r\n */\r\nfunction getLogLevel(level, action, payload, type) {\r\n  switch (typeof level) {\r\n    case 'object':\r\n      return typeof level[type] === 'function' ? level[type](...payload) : level[type];\r\n    case 'function':\r\n      return level(action);\r\n    default:\r\n      return level;\r\n  }\r\n}\r\n\r\nfunction defaultTitleFormatter(options) {\r\n  const { timestamp, duration } = options;\r\n\r\n  return (action, time, took) => {\r\n    const parts = ['action'];\r\n\r\n    parts.push(`%c${String(action.type)}`);\r\n    if (timestamp) parts.push(`%c@ ${time}`);\r\n    if (duration) parts.push(`%c(in ${took.toFixed(2)} ms)`);\r\n\r\n    return parts.join(' ');\r\n  };\r\n}\r\n\r\nfunction printBuffer(buffer, options) {\r\n  const {\r\n    logger,\r\n    actionTransformer,\r\n    titleFormatter = defaultTitleFormatter(options),\r\n    collapsed,\r\n    colors,\r\n    level,\r\n    diff,\r\n  } = options;\r\n\r\n  const isUsingDefaultFormatter = typeof options.titleFormatter === 'undefined';\r\n\r\n  buffer.forEach((logEntry, key) => {\r\n    const { started, startedTime, action, prevState, error } = logEntry;\r\n    let { took, nextState } = logEntry;\r\n    const nextEntry = buffer[key + 1];\r\n\r\n    if (nextEntry) {\r\n      nextState = nextEntry.prevState;\r\n      took = nextEntry.started - started;\r\n    }\r\n\r\n    // Message\r\n    const formattedAction = actionTransformer(action);\r\n    const isCollapsed = typeof collapsed === 'function'\r\n      ? collapsed(() => nextState, action, logEntry)\r\n      : collapsed;\r\n\r\n    const formattedTime = formatTime(startedTime);\r\n    const titleCSS = colors.title ? `color: ${colors.title(formattedAction)};` : '';\r\n    const headerCSS = ['color: gray; font-weight: lighter;'];\r\n    headerCSS.push(titleCSS);\r\n    if (options.timestamp) headerCSS.push('color: gray; font-weight: lighter;');\r\n    if (options.duration) headerCSS.push('color: gray; font-weight: lighter;');\r\n    const title = titleFormatter(formattedAction, formattedTime, took);\r\n\r\n    // Render\r\n    try {\r\n      if (isCollapsed) {\r\n        if (colors.title && isUsingDefaultFormatter) {\r\n          logger.groupCollapsed(`%c ${title}`, ...headerCSS);\r\n        } else logger.groupCollapsed(title);\r\n      } else if (colors.title && isUsingDefaultFormatter) {\r\n        logger.group(`%c ${title}`, ...headerCSS);\r\n      } else {\r\n        logger.group(title);\r\n      }\r\n    } catch (e) {\r\n      logger.log(title);\r\n    }\r\n\r\n    const prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');\r\n    const actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');\r\n    const errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');\r\n    const nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');\r\n\r\n    if (prevStateLevel) {\r\n      if (colors.prevState) {\r\n        const styles = `color: ${colors.prevState(prevState)}; font-weight: bold`;\r\n\r\n        logger[prevStateLevel]('%c prev state', styles, prevState);\r\n      } else logger[prevStateLevel]('prev state', prevState);\r\n    }\r\n\r\n    if (actionLevel) {\r\n      if (colors.action) {\r\n        const styles = `color: ${colors.action(formattedAction)}; font-weight: bold`;\r\n\r\n        logger[actionLevel]('%c action    ', styles, formattedAction);\r\n      } else logger[actionLevel]('action    ', formattedAction);\r\n    }\r\n\r\n    if (error && errorLevel) {\r\n      if (colors.error) {\r\n        const styles = `color: ${colors.error(error, prevState)}; font-weight: bold;`;\r\n\r\n        logger[errorLevel]('%c error     ', styles, error);\r\n      } else logger[errorLevel]('error     ', error);\r\n    }\r\n\r\n    if (nextStateLevel) {\r\n      if (colors.nextState) {\r\n        const styles = `color: ${colors.nextState(nextState)}; font-weight: bold`;\r\n\r\n        logger[nextStateLevel]('%c next state', styles, nextState);\r\n      } else logger[nextStateLevel]('next state', nextState);\r\n    }\r\n\r\n    if (diff) {\r\n      diffLogger(prevState, nextState, logger, isCollapsed);\r\n    }\r\n\r\n    try {\r\n      logger.groupEnd();\r\n    } catch (e) {\r\n      logger.log('—— log end ——');\r\n    }\r\n  });\r\n}\r\n\r\nexport default printBuffer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}