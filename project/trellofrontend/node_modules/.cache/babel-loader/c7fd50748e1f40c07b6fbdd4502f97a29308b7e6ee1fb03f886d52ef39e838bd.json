{"ast":null,"code":"var _jsxFileName = \"/Users/wasi.alavi/git/Wasi123/trello-client/src/routes.js\",\n  _s = $RefreshSig$();\nimport { Navigate, useRoutes } from \"react-router-dom\";\nimport LogoOnlyLayout from \"./layouts/LogoOnlyLayout\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport Home from \"./pages/Home\";\nimport ForgotPassword from './pages/ForgotPassword';\n\n// Custom function to check if the user is authenticated\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isAuthenticated() {\n  // Add your authentication logic here\n  // For example, you can check if the user is logged in or has a valid authentication token\n  // Return true if authenticated, false otherwise\n  return; /* Your authentication logic */\n}\n\nexport default function Router() {\n  _s();\n  // Function to render the home page if the user is authenticated\n  const renderHome = () => {\n    if (isAuthenticated()) {\n      return /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return useRoutes([{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(LogoOnlyLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: \"login\",\n      element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: \"register\",\n      element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 38\n      }, this)\n    }, {\n      path: \"forgot-password\",\n      element: /*#__PURE__*/_jsxDEV(ForgotPassword, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 20\n      }, this)\n    }]\n  }, {\n    path: \"home\",\n    element: renderHome()\n  }]);\n}\n_s(Router, \"mNBMh7IZrKf5fDyw9x3t8azefmI=\", false, function () {\n  return [useRoutes];\n});\n_c = Router;\nvar _c;\n$RefreshReg$(_c, \"Router\");","map":{"version":3,"names":["Navigate","useRoutes","LogoOnlyLayout","Login","Register","Home","ForgotPassword","jsxDEV","_jsxDEV","isAuthenticated","Router","_s","renderHome","fileName","_jsxFileName","lineNumber","columnNumber","to","path","element","children","index","_c","$RefreshReg$"],"sources":["/Users/wasi.alavi/git/Wasi123/trello-client/src/routes.js"],"sourcesContent":["import { Navigate, useRoutes } from \"react-router-dom\";\nimport LogoOnlyLayout from \"./layouts/LogoOnlyLayout\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport Home from \"./pages/Home\";\nimport ForgotPassword from './pages/ForgotPassword';\n\n\n// Custom function to check if the user is authenticated\nfunction isAuthenticated() {\n  // Add your authentication logic here\n  // For example, you can check if the user is logged in or has a valid authentication token\n  // Return true if authenticated, false otherwise\n  return /* Your authentication logic */;\n}\n\nexport default function Router() {\n  // Function to render the home page if the user is authenticated\n  const renderHome = () => {\n    if (isAuthenticated()) {\n      return <Home />;\n    } else {\n      return <Navigate to=\"/login\" />;\n    }\n  };\n\n  return useRoutes([\n    {\n      path: \"/\",\n      element: <LogoOnlyLayout />,\n      children: [\n        {\n          index: true,\n          element: <Navigate to=\"/login\" />,\n        },\n        {\n          path: \"login\",\n          element: <Login />,\n        },\n        { path: \"register\", element: <Register /> },\n        {\n          path: \"forgot-password\",\n          element: <ForgotPassword />,\n        },\n      ],\n    },\n    { path: \"home\", element: renderHome() },\n  ]);\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,kBAAkB;AACtD,OAAOC,cAAc,MAAM,0BAA0B;AACrD,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,cAAc,MAAM,wBAAwB;;AAGnD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,eAAeA,CAAA,EAAG;EACzB;EACA;EACA;EACA,OAAuC,CAAhC;AACT;;AAEA,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC/B;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIH,eAAe,CAAC,CAAC,EAAE;MACrB,oBAAOD,OAAA,CAACH,IAAI;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACjB,CAAC,MAAM;MACL,oBAAOR,OAAA,CAACR,QAAQ;QAACiB,EAAE,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACjC;EACF,CAAC;EAED,OAAOf,SAAS,CAAC,CACf;IACEiB,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEX,OAAA,CAACN,cAAc;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAC3BI,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,IAAI;MACXF,OAAO,eAAEX,OAAA,CAACR,QAAQ;QAACiB,EAAE,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAClC,CAAC,EACD;MACEE,IAAI,EAAE,OAAO;MACbC,OAAO,eAAEX,OAAA,CAACL,KAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IACnB,CAAC,EACD;MAAEE,IAAI,EAAE,UAAU;MAAEC,OAAO,eAAEX,OAAA,CAACJ,QAAQ;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE,CAAC,EAC3C;MACEE,IAAI,EAAE,iBAAiB;MACvBC,OAAO,eAAEX,OAAA,CAACF,cAAc;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAC5B,CAAC;EAEL,CAAC,EACD;IAAEE,IAAI,EAAE,MAAM;IAAEC,OAAO,EAAEP,UAAU,CAAC;EAAE,CAAC,CACxC,CAAC;AACJ;AAACD,EAAA,CAhCuBD,MAAM;EAAA,QAUrBT,SAAS;AAAA;AAAAqB,EAAA,GAVMZ,MAAM;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}