{"ast":null,"code":"var _jsxFileName = \"/Users/wasi.alavi/git/Wasi123/trello-client/src/routes.js\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport LogoOnlyLayout from \"./layouts/LogoOnlyLayout\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport Home from \"./pages/Home\";\nimport ForgotPassword from './pages/ForgotPassword';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrivateRoute(_ref) {\n  let {\n    element: Element,\n    authenticated,\n    ...rest\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    element: authenticated ? /*#__PURE__*/_jsxDEV(Element, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true,\n      state: {\n        from: rest.location\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n_c = PrivateRoute;\nexport default function Router() {\n  const isAuthenticated = false; // Replace with your authentication logic\n\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/login\",\n      element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/register\",\n      element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/forgot-password\",\n      element: /*#__PURE__*/_jsxDEV(ForgotPassword, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 47\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      element: /*#__PURE__*/_jsxDEV(LogoOnlyLayout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 18\n      }, this)\n      // All the routes within this layout are protected\n      ,\n      children: /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/home\",\n        element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 20\n        }, this),\n        authenticated: isAuthenticated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/*\" // Catch-all route for unknown paths\n      ,\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 18\n      }, this) // Redirect to login if no route matches\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Router;\nvar _c, _c2;\n$RefreshReg$(_c, \"PrivateRoute\");\n$RefreshReg$(_c2, \"Router\");","map":{"version":3,"names":["Navigate","Route","Routes","LogoOnlyLayout","Login","Register","Home","ForgotPassword","jsxDEV","_jsxDEV","PrivateRoute","_ref","element","Element","authenticated","rest","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","state","from","location","_c","Router","isAuthenticated","children","path","_c2","$RefreshReg$"],"sources":["/Users/wasi.alavi/git/Wasi123/trello-client/src/routes.js"],"sourcesContent":["import { Navigate, Route, Routes } from \"react-router-dom\";\nimport LogoOnlyLayout from \"./layouts/LogoOnlyLayout\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport Home from \"./pages/Home\";\nimport ForgotPassword from './pages/ForgotPassword';\nfunction PrivateRoute({ element: Element, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      element={authenticated ? (\n        <Element />\n      ) : (\n        <Navigate to=\"/login\" replace state={{ from: rest.location }} />\n      )}\n    />\n  );\n}\n\nexport default function Router() {\n  const isAuthenticated = false; // Replace with your authentication logic\n\n  return (\n    <Routes>\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/register\" element={<Register />} />\n      <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n      <Route\n        element={<LogoOnlyLayout />}\n        // All the routes within this layout are protected\n      >\n        <PrivateRoute\n          path=\"/home\"\n          element={<Home />}\n          authenticated={isAuthenticated}\n        />\n      </Route>\n      <Route\n        path=\"/*\" // Catch-all route for unknown paths\n        element={<Navigate to=\"/login\" />} // Redirect to login if no route matches\n      />\n    </Routes>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}